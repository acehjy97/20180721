{
    "collab_server" : "",
    "contents" : "###외부에서 젒복해서 분석할 경우\ngetwd()    ###다른회사...?\ndir.create(\"../project180721\") #.으로 하나 올라가 그럼 User에 있겠저\nsetwd(\"../project180721\")      # 상대 경로로 위치 잡기\nlist.files()\n#오른쪽 위에 project:(None) 클릭, newproject클릭, existing directory클릭.\n\n\n\n#######################################################\n## 문제 1 rJava, DBI, RJDBC, dplyr\n## 패키지를 호출하시오\n#######################################################\nlibrary(rJava)\nlibrary(DBI)\nlibrary(RJDBC)\nlibrary(XML)\nlibrary(memoise)\nlibrary(KoNLP)\nlibrary(wordcloud)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(rvest)\nlibrary(RColorBrewer)\nlibrary(data.table)\nlibrary(reshape)\n#######################################################\n## 문제 2 오라클과 Project 를 연결하시오\n#######################################################\n### RStudio 와 Oracle 연결\ninstall.packages(\"rJava\")\ninstall.packages(\"DBI\")\ninstall.packages(\"RJDBC\")\nlibrary(rJava)\nlibrary(DBI)\nlibrary(RJDBC)\ndrv <- JDBC(\n  \"oracle.jdbc.driver.OracleDriver\",\n  \"C:\\\\oraclexe\\\\app\\\\oracle\\\\product\\\\11.2.0\\\\server\\\\jdbc\\\\lib\\\\ojdbc6.jar\"\n)\nconn <- dbConnect(drv,\n                  \"jdbc:oracle:thin:@localhost:1521:xe\",\n                  \"hr\",\n                  \"oracle\")\ndbGetQuery(conn, \"SELECT * FROM TAB\")\n\n#######################################################\n## 문제 3 오라클의 테이블을 조회하시오\n####################################################### \n##접속코드\ntab = dbGetQuery(conn, \"SELECT * FROM TAB\")\ntname <- tab$TNAME; tname\n\n#######################################################\n## 문제 4 오라클의 각 테이블을 데이터프레임으로 전환하시오\n## 데이터프레임의 이름은 다음과 같이 하시오.\n## COUNTRIES -> cnt\n## DEPARTMENTS -> dep\n## EMPLOYEES -> emp\n## EMP_DETAILS_VIEW -> empd\n## JOBS -> job\n## JOB_HISTORY -> jobh\n## LOCATIONS -> loc\n## REGIONS -> reg\n#######################################################\ncnt <- data.frame(dbGetQuery(conn,\"SELECT * FROM COUNTRIES\"))\ndep <- data.frame(dbGetQuery(conn,\"SELECT * FROM DEPARTMENTS\"))\nemp <- data.frame(dbGetQuery(conn,\"SELECT * FROM EMPLOYEES\"))\nempd <- data.frame(dbGetQuery(conn,\"SELECT * FROM EMP_DETAILS_VIEW\"))\njob <- data.frame(dbGetQuery(conn,\"SELECT * FROM JOBS\"))\njobh <- data.frame(dbGetQuery(conn,\"SELECT * FROM JOB_HISTORY\"))\nloc <- data.frame(dbGetQuery(conn,\"SELECT * FROM LOCATIONS\"))\nreg <- data.frame(dbGetQuery(conn,\"SELECT * FROM REGIONS\"))\nView(cnt)\nView(dep)\nView(emp)\ncnt\n\n#######################################################\n## 문제 5 cnt 의 컬럼명을 한글로 전환하시오\n## 국가아이디 = COUNTRY_ID\n## 국가명 = COUNTRY_NAME\n## 지역아이디 = REGION_ID\n#######################################################\ncnt <- cnt %>% dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)\ncnt\n\n#######################################################\n## 문제 6 dep 의 컬럼명을 한글로 전환하시오\n## 부서아이디 = DEPARTMENT_ID\n## 부서명 = DEPARTMENT_NAME\n## 매니저아이디 = MANAGER_ID\n## 위치아이디 = LOCATION_ID\n#######################################################\ndep <- dep %>% dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,\n                                  매니저아이디 = MANAGER_ID, 위치아이디 = LOCATION_ID)\ndep\n#######################################################\n## 문제 7 emp 의 컬럼명을 한글로 전환하시오.\n## 그리고 First Name 과 Last Name 을\n## 붙여서 이름 으로 된 컬럼을 추가하시오\n## 단, 이름 간격은 띄울것. ex) James Dean\n## 직원아이디 = EMPLOYEE_ID\n## 이메일 = EMAIL\n## 전화번호 = PHONE_NUMBER\n## 채용일 = HIRE_DATE\n## 업무아이디 = JOB_ID\n## 연봉 = SALARY\n## 커미션비율 = COMMISSION_PCT\n## 매니저아이디 = MANAGER_ID\n## 부서아이디 = DEPARTMENT_ID\n#######################################################\nstr(emp)\nemp <- emp %>% dplyr::rename(직원아이디 = EMPLOYEE_ID, 이메일 = EMAIL,\n                             전화번호 = PHONE_NUMBER, 채용일 = HIRE_DATE,\n                             업무아이디 = JOB_ID, 연봉 = SALARY,\n                             커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,\n                             부서아이디 = DEPARTMENT_ID) %>% \n  dplyr::mutate(이름 = paste(emp$FIRST_NAME, emp$LAST_NAME))\nhead(emp)\nView(emp)\n\n\n#######################################################\n## 문제 8  emp 의 First Name 과 Last Name 컬럼 두개를\n## 삭제하시오. subset\n#######################################################\nif(is.data.frame(emp)){\n  emp<- subset(emp, select= -c(FIRST_NAME,LAST_NAME))\n}\nView(emp)\n\n#######################################################\n## 문제 9\n## 매달 지급하는 월급여(연봉 / 12)를 보여주는\n## 월급 이라는 컬럼을\n## 추가시키시오.(0단위 절삭)\n#######################################################\nemp <- emp %>% dplyr::mutate(월급=연봉 %/% 12)\nhead(emp)\n\n#######################################################\n## 문제 10 job 의 컬럼명을 한글로 전환하시오\n## 업무아이디 = JOB_ID\n## 업무명 = JOB_TITLE\n## 최소연봉 = MIN_SALARY\n## 최대연봉 = MAX_SALARY\n#######################################################\njob <- job %>% dplyr::rename(업무아이디 = JOB_ID,업무명 = JOB_TITLE,\n                             최소연봉 = MIN_SALARY,최대연봉 = MAX_SALARY)\nhead(job)\n\n\n#######################################################\n## 문제 11 jobh 의 컬럼명을 한글로 전환하시오\n## 직원아이디 = EMPLOYEE_ID\n## 업무시작일 = START_DATE\n## 업무종료일 = END_DATE\n## 업무아이디 = JOB_ID\n## 부서아이디 = DEPARTMENT_ID\n#######################################################\njobh <- jobh %>% dplyr::rename(직원아이디 = EMPLOYEE_ID,\n                               업무시작일 = START_DATE,\n                               업무종료일 = END_DATE,\n                               업무아이디 = JOB_ID,\n                               부서아이디 = DEPARTMENT_ID)\nhead(jobh)\n\n\n\n#######################################################\n## 문제 12 loc 의 컬럼명을 한글로 전환하시오\n# 위치아이디 = LOCATION_ID\n# 거리주소 = STREET_ADDRESS\n# 우편번호 = POSTAL_CODE\n# 도시 = CITY\n# 주 = STATE_PROVINCE\n# 국가아이디 = COUNTRY_ID\n#######################################################\nloc <- loc %>% dplyr::rename(위치아이디 = LOCATION_ID,거리주소 = STREET_ADDRESS,\n                              우편번호 = POSTAL_CODE,도시 = CITY,\n                              주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)\nhead(loc)\n\n\n#######################################################\n## 문제 13 reg 의 컬럼명을 한글로 전환하시오\n## 지역아이디 = REGION_ID\n## 지역명 = REGION_NAME\n#######################################################\nreg <- reg %>% dplyr::rename(지역아이디 = REGION_ID,\n                              지역명 = REGION_NAME)\nhead(reg)\n\n\n####################################################### \n\n## 문제 14. 연봉이 10000불 이상인 \n## 사원(emp)의 목록을 이름, 직원아이디, 연봉을 \n## 연봉 내림차순으로 보여주세요. \n####################################################### \nemp %>% dplyr::filter(연봉 >= 10000) %>% \n  dplyr::arrange(desc(연봉)) %>% \n  dplyr::select(이름, 직원아이디, 연봉)\n\n\n####################################################### \n## 문제 15. 연봉이 3000 미만인 \n## 사원에게 보너스로 급여의 1%를 지급하겠다고 합니다 \n## 대상자의 목록을 이름, 직원아이디, 연봉을 기재하고 \n## 아이디 오름차순으로 보여주시오. 단 보너스지급내역서 \n## 라는 이름의 데이터프레임으로 작성한 후 삭제하시오. \n## 보너스에는 각 금액에 만원단위를 첨부합니다. ## 힌트: 보너스= sprintf(\"%0.0f 만원\", 연봉*0.01) 사용 \n## 힌트: rm(보너스지급내역서) 하면 rm 하면 데이터프레임삭제됨 \n####################################################### \n보너스지급내역서 <- emp %>% dplyr::filter(연봉 < 3000) %>% \n  dplyr::arrange(직원아이디) %>% \n  dplyr::select(이름, 직원아이디, 연봉) %>%\n  dplyr::mutate(보너스= sprintf(\"%0.0f 만원\", 연봉*0.01))\nhead(보너스지급내역서)\n\nsprintf(\"%f\", pi)\nsprintf(\"%.3f\", pi)\nsprintf(\"%1.0f\", pi)\nsprintf(\"%5.1f\", pi)\nsprintf(\"%20.1f\", pi)\nsprintf(\"%05.1f\", pi)\nsprintf(\"%+f\", pi)\nsprintf(\"% f\", pi)\nsprintf(\"%-10f\", pi) # left justified\nsprintf(\"%s아 놀자\", c(\"혜민\",\"민선\",\"예리\"))\nsprintf(\"%s %d\", \"문제\", 1:3)\n\nwrite.csv(보너스지급내역서,'보너스지급내역서.CSV')\nrm(보너스지급내역서)\n\n####################################################### \n## 문제 16. 직원중에서 급여가 가장 높은 사람이 \n## CEO 라고 합니다. 이름이 무엇입니까? \n## apply(object, direction, function to apply) \n## 적용방향 - 1:가로방향, 2: 세로방향 \n####################################################### \nemp %>% dplyr::filter(연봉==apply(emp %>% dplyr::select(연봉),2,max)) %>% \n  dplyr::select(이름)\n\n\n\n\n####################################################### \n## 문제 17. 연봉이 10000이 넘는 직원의 부서명, 이름, \n## 연봉을 출력하시오. \n####################################################### \nemp %>% \n  dplyr::left_join(dep, by='부서아이디') %>% \n  dplyr::filter(연봉>=10000) %>%\n  dplyr::select(부서명, 이름, 연봉) %>% \n  dplyr::arrange(desc(연봉))\n\n# left가 emp, right가 dep\nnames(emp);\nnames(dep)\nnames(job)\n# Database\n# TAble <- emp + dep - 부서명, 이름, 연봉 ; 조인\n# 두개 테이블을 먼저 합치고 나서, 쎌렉\n# emp : 프라이머리키(PK) 아이디\n#         - 포린키 (FK)\n#             부서아이디\n# dep : PK 부서아이디, firm의 pk를 fk로 갖고 있게 한다.\n# firm : PK\n# FK 없이, PK만 갖고 있는 테이블은 제일 상위 테이블임.\n# 부서가 먼저 존재해야지. 그 다음 것들이 있을 수 있지 않겠음?\n# 부모자식관계?! 자식이 부모의 PK값을 가지고 있는데, 그것을 fk라함\n\n\nhea##\n\n######################################### \n#### [문제 18] \n#### 연봉이 12000 이 넘는 직원의 부서명,이름,연봉,직책 \n#### 을 기재하시오. \n###################################################### \nemp %>% \n  dplyr::left_join(dep,by='부서아이디') %>% \n  dplyr::left_join(job,by='업무아이디') %>% \n  dplyr::filter(연봉 >= 12000) %>% \n  dplyr::select(부서명, 이름, 연봉, 업무명) %>% \n  dplyr::arrange(desc(연봉))\n\n##여기에서는 emp가 아가지 아가.\n\n\n\n####################################################### \n#### [문제 19] \n#### 부서명 별로 연봉 평균을 구하시오 \n###############################그룹빠이!####################### \n부서별_연봉평균 <- emp %>% dplyr::left_join(dep,by='부서아이디') %>% \n  dplyr::group_by(부서명,부서아이디) %>% \n##밖으로 보여주는 것은 부서명 = 명목상 기준, 사실 부서아이디가 기준(FK)\n  dplyr::summarise(부서별연봉평균 = mean(연봉,na.rm=TRUE)) %>%\n  dplyr::arrange(desc(부서별연봉평균))\nView(부서별_연봉평균)\n\n\n\n####################################################### \n#### [문제 20] \n#### 이 회사의 부서 수를 기재하시오. \n###################################################### \ndep %>% dplyr::distinct(부서명) %>% count\n\n\n####################################################### \n## 문제 21. 부서명, 도시, 각 부서별사원수, \n## 각 부서 별 평균 연봉을 조회한다. \n## 평균 연봉은 소수점 2 자리까지만 표현한다. \n## emp: 연봉 \n## dep: 부서명 \n## loc: 도시 \n## [힌트] left_join, group_by, summarise \n####################################################### \naa<-dep %>% dplyr::left_join(emp,by='부서아이디') %>% \n  dplyr::left_join(loc,by='위치아이디') %>% \n  dplyr::group_by(부서명, 도시) %>% \n  dplyr::summarise(부서별평균연봉=sprintf(\"%0.2f\",mean(연봉,na.rm=T)),\n                          직원수=length(직원아이디)) \nView(aa)\nsprintf(\"%0.2f\",mean(연봉,na.rm=T))\nemp$연봉\nstr(emp)\n\n####################################################### \n#### 문제 22. 부서벼로 가장 높은 연봉을 \n#### 부서아이디, 부서명, 최대연봉으로 \n#### 표시되도록 하세요. \n###################################################### \nemp %>% dplyr::left_join(dep,by='부서아이디') %>% \n  dplyr::group_by(부서아이디, 부서명) %>% \n  dplyr::summarise(최대연봉 = max(연봉)) \n\nnames(emp)\nnames(dep)\n\n\n####################################################### \n#### 문제 23. 부서아이디를 발급받지 않으면 신입입니다. \n#### 신입의 이름과 연봉, 부서아이디 없음을 출력하시오. \n#  test <- c('apple','banana','cherry','Apple','Pineapple',NA)\n# ifelse(stringr::str_detect(test,'A'),'Good','Bad')\n###################################################### \n# :( \n# library(stringr)\n# a<-ifelse(!is.na(emp %>% dplyr::select(부서아이디)),\n#        emp %>% dplyr::select(이름, 연봉),\"부서아이디없음\")\n#                   a\n\nemp %>% dplyr::filter(!is.na(emp %>% dplyr::select(부서아이디))) %>% \n  dplyr::select(이름, 연봉)\n\n\n\n####################################################### \n## 문제 24. 직원중에서 이름에 대문자 S 와 T가 포함된 직원을 출력하시오. \n## 다음주로 넘깁니다. 아래 apply 를 알아야 해결할 수 있습니다. \n####################################################### \nemp %>% dplyr::filter(stringr::str_detect(emp$이름, 'S'),\n                      stringr::str_detect(emp$이름, 'T')) %>% \n  dplyr::select(이름)\n\n\"STR\" == S*\n  ",
    "created" : 1532743919586.000,
    "dirty" : false,
    "encoding" : "CP949",
    "folds" : "",
    "hash" : "3413423851",
    "id" : "CC10191A",
    "lastKnownWriteTime" : 1532769195,
    "last_content_update" : 1532769195834,
    "path" : "C:/Users/User/project180728/OracleHr.R",
    "project_path" : "OracleHr.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}