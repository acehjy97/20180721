1-pchisq(1.41,3)
-0.4346-3.4461+0.987*10.73
QCHISQ*(0.05,1)
QCHISQ(0.05,1)
qchisq(0.05,1)
qchisq(0.05,3)
dchisq(0.05,1)
qchisq(1-0.05,1)
1-pchisq(3.8414,1)
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
getwd()
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
read.csv("class_scores.csv")
read.csv("C:\Users\User\Desktop\R 이젠\180721\class_scores.csv")
read.csv("class_scores.csv")
temp <- data.frame(read.csv("class_scores.csv"))
temp
head(temp)
tail(temp)  ###밑바닥 여섯개 나옴
summary(Temp)
summary(temp)
view(temp)
View(temp)
dim(temp)
head(grade)
grade <- data.frame(read.csv("class_scores.csv"))
head(grade)
View(grade)
select(grade,Math)
mean(select(grade,Math))
mean(select(grade,"Math"))
mean(as.numeric(select(grade,Math)))
(select(grade,Math)
(select(grade,Math))
select(grade,Math)
select(grade,"Math")
dim(select(grade,"Math"))
grade <- data.frame(read.csv("class_scores.csv"))
grade
install.packages("dplyr") #디플라이어 텍스트 분석 최강!
library(dplyr)
grade %>% dplyr::select()
grade <- data.frame(read.csv("class_scores.csv"))
grade
head(grade)  ###상위 여섯개 값만 나옴
tail(grade)  ###밑바닥 여섯개 나옴
summary(grade)  ###자료의 평균, 사분위 수 등 SUMMARY가 나옴
View(grade)
############범위 잡고,
install.packages("dplyr")
head(grade)
grade %>% dplyr::select()
mean(select(grade,"Math"))
grade %>% dplyr::select(Math, Enligh, Science)
grade %>% dplyr::select(Math, English, Science)
grade %>% dplyr::select(Math, English, Science)%>% head
grade  %>% dplyr::select(Math, English, Science)  %>% slice(1:10)
grade %>% dplyr::select(Math, English, Science) %>% head
grade  %>% dplyr::select(-gender)  %>% slice(1:10)
grade  %>% dplyr::select(Math, English, Science)  %>% slice(1:10)
grade  %>% dplyr::select(Math:Writing)  %>% slice(1:10)
grade  %>% dplyr::select(Math:Writing)  %>% slice(1:3)
grade  %>% dplyr::select(starts_with("E"))  %>% slice(1:10)
grade  %>% dplyr::select(everything())  %>% slice(1:5)
grade  %>% dplyr::select(ends_with("E"))  %>% slice(1:5)
grade  %>% dplyr::select(starts_with("E"))  %>% slice(1:5)
grade  %>% dplyr::select(ends_with("E"))  %>% slice(1:5)
grade  %>% dplyr::select(contains("e"))  %>% slice(1:5)
grade  %>% dplyr::select(1,3,5)  %>% slice(1:5)
a=c(1:30);matrix(a,5,6)
select(1,3,5)
a=c(1:30);b=matrix(a,5,6)
select(b,1,3,5)
select(b,3)
## 1 국어, 영어, 수학 도메인기(=컬럼)만 가져오기
temp <- data.frame(read.csv("class_scores.csv"));temp
temp %>% dplyr::select(Math, English, Science) %>% head
# "%>% dplyr" : 디플라이어에 있는 select을 사용하겠다.
# "%>% " : 파이프라인 and와 같은 쓰임.
## 2 상위 10개 보기
temp  %>% dplyr::select(-gender)  %>% slice(1:10)
temp  %>% dplyr::select(1,3,5)  %>% slice(1:5)
## 1 국어, 영어, 수학 도메인기(=컬럼)만 가져오기
scores <- data.frame(read.csv("class_scores.csv"));scores
scores %>% dplyr::select(Math, English, Science) %>% head
# "%>% dplyr" : 디플라이어에 있는 select을 사용하겠다.
# "%>% " : 파이프라인 and와 같은 쓰임.
scores  %>% dplyr::select(contains("e"))  %>% slice(1:5)
scores  %>% dplyr::filter(grade==1 & gender=='M') %>% slice(1:5)
scores  %>% dplyr::filter(grade==1 && gender=='M') %>% slice(1:5)
c(1==1 & 2==1)
c(1==1 & 2==1,3=2)
c(1==1 & 2==1,3==2)
c(1==1 && 2==1,3==2)
c(1==1 & 2==1)
c(1==1 && 2==1)
scores  %>% dplyr::filter(grade==1) %>% slice(1:4)
scores  %>% dplyr::filter(grade==1 & gender=='M') %>% slice(1:4)
scores  %>% dplyr::filter(!grade==1) %>% slice(1:5)
scores  %>% dplyr::filter(grade!=1) %>% slice(1:5)
scores  %>% dplyr::filter(grade ==1 | grade==2) %>% slice(1:5)
scores  %>% dplyr::filter(grade ==1 | grade==2) %>% slice(1:20)
scores  %>% dplyr::filter(grade ==1 | grade==2) %>% tail(5)
scores  %>% dplyr::filter(Math >= 80) %>% slice(1:5)
scores  %>% dplyr::filter(Math >= 80 & English >= 70) %>% slice(1:5)
(Math >= 80 & English >= 70)
scores  %>% dplyr::filter(Math >= 80 & English >= 70) %>% slice(1:5)
scores  %>% dplyr::filter(Math >= 80 && English >= 70) %>% slice(1:5)
scores  %>% dplyr::filter(Stu_ID >= 10101 & Stu_ID <= 10120) %>% slice(1:5)
scores  %>% dplyr::filter(Stu_ID >= 10101 & Stu_ID <= 10120) %>% tail(1:5)
scores  %>% dplyr::filter(Stu_ID >= 10101 & Stu_ID <= 10120) %>% tail(5)
5%%4
5%/%4
5%//%4
5/4
5%/%4
5%%2
5%%3
scores  %>% dplyr::filter(Stu_ID %%2 ==1 & gender = 'M' & Math >= 90 % Science >= 90) %>% tail(5)
scores  %>% dplyr::filter(Stu_ID %%2 ==1 & gender == 'M' & Math >= 90 % Science >= 90) %>% tail(5)
scores  %>% dplyr::filter(Stu_ID %%2 ==1 & gender == 'M' & Math >= 90 & Science >= 90) %>% tail(5)
#  수학과 과학이 모두 90점 이상인 학생들만 보기
scores  %>% dplyr::filter(Stu_ID %%2 ==1 & gender == 'M' &
Math >= 90 & Science >= 90) %>% sliece(1:5)
scores  %>% dplyr::filter(Stu_ID %%2 ==1 & gender == 'M' &
Math >= 90 & Science >= 90) %>% slice(1:5)
scores  %>% dplyr::filter(Math==100 |English==100| Science==100|Marketing==100|Writing==100) %>% tail(5)
scores  %>% dplyr::filter(Math==0 |English==0| Science==0|
Marketing==0|Writing==0) %>% slice(1:5)
scores  %>% dplyr::filter(Math==0 |English==0| Science==0|
Marketing==0|Writing==0) %>% slice(1:5)
scores  %>% dplyr::filter(Math==0 ) %>% slice(1:5)
scores  %>% dplyr::filter(Math==0 ) %>% slice(1:5)
scores  %>% dplyr::filter(Math==100 |English==100| Science==100|
Marketing==100|Writing==100) %>% slice(1:5)
scores  %>% dplyr::filter()
scores %<% dplyr::mutate(Average=mean(Math,English, Science, Marketing, Writing))
scores %>% dplyr::mutate(Average=mean(Math,English, Science, Marketing, Writing))
scores %>% dplyr::mutate(Average=mean(Math+English+Science+Marketing+Writing))
scores %>% dplyr::mutate(Average=(Math+English+Science+Marketing+Writing))
scores %>% dplyr::mutate(Average=(Math+English+Science+Marketing+Writing)/5)
scores<-scores %>% dplyr::
mutate(Average=(Math+English+Science+Marketing+Writing)/5)
%>% slice(1:3)
scores<-scores %>% dplyr::
mutate(Average=(Math+English+Science+Marketing+Writing)/5)%>% slice(1:3)
scores<-scores %>% dplyr::
mutate(Average=(Math+English+Science+Marketing+Writing)/5)
##  수학과 과학이 모두 90점 이상인 학생들만 보기
scores  %>% dplyr::filter(Stu_ID %%2 ==1 & gender == 'M' &
Math >= 90 & Science >= 90) %>% slice(1:5)
## 9. 학생들 중 한 과목이라도 100점이 있는 학생만 보기
scores  %>% dplyr::filter(Math==100 |English==100| Science==100|
Marketing==100|Writing==100) %>% slice(1:5)
###################### mutate 예제 ######################
##1. scores에 Average 컬럼(학생 평균점수) 추가
scores <- scores %>% dplyr::
mutate(Average=(Math+English+Science+Marketing+Writing)/5)
scores %>% slice(1:3)
scores <- scores %>% dplyr::
mutate(Average=(Math + English + Science + Marketing + Writing)/5)
###################### mutate 예제 ######################
##1. scores에 Average 컬럼(학생 평균점수) 추가
scores <- scores %>% dplyr::
mutate(Average=(Math + English + Science + Marketing + Writing)/5)
scores %>% slice(1:3)
install.packages("rJava")
source('C:/Users/User/Desktop/R 이젠/180721/OracleDemo.R', echo=TRUE)
getwd()
dir.create("../project180728")
setwd("../project180728")
list.files()
source('C:/Users/User/project180728/installpackages.R', echo=TRUE)
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
getwd()
read.csv("class_scores.csv")
getwd()
dbGetQuery(conn, "SELECT * FROM TAB")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"oracle")
dbGetQuery(conn, "SELECT * FROM TAB")
tab = dbGetQuery(conn, "SELECT * FROM TAB")
tname <- tab$TNAME; tname
view(cnt)
View(cnt)
cnt <- data.frame(dbGetQuery(conn,"SELECT * FROM COUNTRIES"))
dep <- data.frame(dbGetQuery(conn,"SELECT * FROM DEPARTMENTS"))
emp <- data.frame(dbGetQuery(conn,"SELECT * FROM EMPLOYEES"))
empd <- data.frame(dbGetQuery(conn,"SELECT * FROM EMP_DETAILS_VIEW"))
job <- data.frame(dbGetQuery(conn,"SELECT * FROM JOBS"))
jobh <- data.frame(dbGetQuery(conn,"SELECT * FROM JOB_HISTORY"))
loc <- data.frame(dbGetQuery(conn,"SELECT * FROM LOCATIONS"))
reg <- data.frame(dbGetQuery(conn,"SELECT * FROM REGIONS"))
View(cnt)
tab
cnt <- data.frame(dbGetQuery(conn,"SELECT * FROM COUNTRIES"))
dep <- data.frame(dbGetQuery(conn,"SELECT * FROM DEPARTMENTS"))
emp <- data.frame(dbGetQuery(conn,"SELECT * FROM EMPLOYEES"))
empd <- data.frame(dbGetQuery(conn,"SELECT * FROM EMP_DETAILS_VIEW"))
jobh <- data.frame(dbGetQuery(conn,"SELECT * FROM JOB_HISTORY"))
job <- data.frame(dbGetQuery(conn,"SELECT * FROM JOBS"))
loc <- data.frame(dbGetQuery(conn,"SELECT * FROM LOCATIONS"))
reg <- data.frame(dbGetQuery(conn,"SELECT * FROM REGIONS"))
View(cnt)
View(dep)
View(emp)
emp %>% select(everything()) %>% slice(1:3)
emp %>% dplyr::select(everything()) %>% slice(1:3)
emp %>% dplyr::select(everything()) %>% slice(1:3)
emp %>% dplyr::select(everything())  %>%  slice(1:3)
cnt %>% dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
cnt
cnt %>% dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
cnt
cnt %>% dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
library(dplyr)
cnt <- cnt %>% dplyr::rename(국가아이디 = COUNTRY_ID,국가명 = COUNTRY_NAME,지역아이디 = REGION_ID)
cnt
dep <- dep %>% dplyr::rename(부서아이디 = DEPARTMENT_ID,부서명 = DEPARTMENT_NAME,
매니저아이디 = MANAGER_ID, 위치아이디 = LOCATION_ID)
dep
emp
paste(FIRST_NAME, " ", LAST_NAME
paste(FIRST_NAME, " ", LAST_NAME)
paste(emp$FIRST_NAME, " ", emp$LAST_NAME)
emp <- emp %>% dplyr::rename(직원아이디 = EMPLOYEE_ID, 이메일 = EMAIL,
전화번호 = PHONE_NUMBER, 채용일 = HIRE_DATE,
업무아이디 = JOB_ID, 연봉 = SALARY,
커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
dplyr::mutate(이름 = paste(emp$FIRST_NAME, " ", emp$LAST_NAME)) %>% head
emp
job <- job %>% dplyr::rename(업무아이디 = JOB_ID,업무명 = JOB_TITLE,
최소연봉 = MIN_SALARY,최대연봉 = MAX_SALARY)
job
emp <- data.frame(dbGetQuery(conn,"SELECT * FROM EMPLOYEES"))
emp
emp <- emp %>% dplyr::rename(직원아이디 = EMPLOYEE_ID, 이메일 = EMAIL,
전화번호 = PHONE_NUMBER, 채용일 = HIRE_DATE,
업무아이디 = JOB_ID, 연봉 = SALARY,
커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
dplyr::mutate(이름 = paste(emp$FIRST_NAME, " ", emp$LAST_NAME))
emp
head(emp)
str(emp)
paste(emp$FIRST_NAME, " ", emp$LAST_NAME)
paste(emp$FIRST_NAME, emp$LAST_NAME)
emp <- emp %>% dplyr::rename(직원아이디 = EMPLOYEE_ID, 이메일 = EMAIL,
전화번호 = PHONE_NUMBER, 채용일 = HIRE_DATE,
업무아이디 = JOB_ID, 연봉 = SALARY,
커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
dplyr::mutate(이름 = paste(emp$FIRST_NAME, emp$LAST_NAME))
emp
emp <- data.frame(dbGetQuery(conn,"SELECT * FROM EMPLOYEES"))
emp <- emp %>% dplyr::rename(직원아이디 = EMPLOYEE_ID, 이메일 = EMAIL,
전화번호 = PHONE_NUMBER, 채용일 = HIRE_DATE,
업무아이디 = JOB_ID, 연봉 = SALARY,
커미션비율 = COMMISSION_PCT, 매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID) %>%
dplyr::mutate(이름 = paste(emp$FIRST_NAME, emp$LAST_NAME))
head(emp)
View(emp)
loc <- loc %>% dplyr::rename(위치아이디 = LOCATION_ID,거리주소 = STREET_ADDRESS,
우편번호 = POSTAL_CODE,도시 = CITY,
주 = STATE_PROVINCE,국가아이디 = COUNTRY_ID)
head(loc)
if(is.data.frame(emp)){
emp<- subset(emp, select= -c(FIRST_NAME,LAST_NAME))
}
View(emp)
reg <- reg %>% dplyr::rename(지역아이디 = REGION_ID,
지역명 = REGION_NAME)
head(reg)
jobh <- jobh %>% dplyr::rename(직원아이디 = EMPLOYEE_ID,
업무시작일 = START_DATE,
업무종료일 = END_DATE,
업무아이디 = JOB_ID,
부서아이디 = DEPARTMENT_ID)
head(jobh)
emp <- emp %>% dplyr::mutate(월급=연봉 %/% 12)
head(emp)
reg
reg <- data.frame(dbGetQuery(conn,"SELECT * FROM REGIONS"))
reg
reg <- reg %>% dplyr::rename(지역아이디 = REGION_ID,
지역명 = REGION_NAME)
head(reg)
emp
emp %>% dplyr::filter(연봉 >- 10000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(desc(연봉))
head(emp)
emp %>% dplyr::filter(연봉 >- 10000) %>%
dplyr::arrange(desc(연봉)) %>%
dplyr::select(이름, 직원아이디, 연봉)
head(emp)
emp %>% dplyr::filter(연봉 >- 10000) %>%
dplyr::arrange(desc(연봉)) %>%
dplyr::select(이름, 직원아이디, 연봉) %>% head
emp %>% dplyr::filter(연봉 >= 10000) %>%
dplyr::arrange(desc(연봉)) %>%
dplyr::select(이름, 직원아이디, 연봉) %>% head
보너스지급내역서 <- emp %>% dplyr::filter(연봉 < 30000) %>%
dplyr::arrange(직원아이디) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::mutate(보너스= sprintf("%0.0f 만원", 연봉*0.01))
보너스지급내역서
emp %>% dplyr::filter(연봉 >= 10000) %>%
dplyr::arrange(desc(연봉)) %>%
dplyr::select(이름, 직원아이디, 연봉)
보너스지급내역서 <- emp %>% dplyr::filter(연봉 < 30000) %>%
dplyr::arrange(직원아이디) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::mutate(보너스= sprintf("%0.0f 만원", 연봉*0.01))
보너스지급내역서
apply(급여,2,max)
apply(emp$급여,2,max)
matrix(rnorm(12,10,3),3,4)
apply(a,2,max)
apply(a,2,mean)
apply(a,2,sum)
a=matrix(rnorm(12,10,3),3,4)
apply(a,2,sum)
apply(급여,2,max)
emp %>% apply(급여,2,max)
dplyr::emp %>% apply(급여,2,max)
emp %>% apply(급여,2,max)
emp %>% apply(급여,2,max)
emp
emp[1,]
emp %>% dplyr::select(연봉)
apply(emp %>% dplyr::select(연봉),2,max)
rm(보너스지급내역서)
apply(emp %>% dplyr::select(연봉),2,max)
emp %>% apply(emp[,6],2,max)
emp %>% dplyr::filter(연봉 == apply(emp %>% dplyr::select(연봉),2,max)) %>%
dplyr::select(이름)
sprintf("%f", pi)
sprintf("%1.f", 101)
sprintf("%1.f 냠냠", 101)
보너스지급내역서 <- emp %>% dplyr::filter(연봉 < 30000) %>%
dplyr::arrange(직원아이디) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::mutate(보너스= sprintf("%0.0f 만원", 연봉*0.01))
보너스지급내역서
sprintf("%1.f 냠냠", 101.12)
sprintf("%0.0f 냠냠", 101.12)
sprintf("%0.00f 냠냠", 101.12)
head(보너스지급내역서)
보너스지급내역서 <- emp %>% dplyr::filter(연봉 < 3000) %>%
dplyr::arrange(직원아이디) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::mutate(보너스= sprintf("%0.0f 만원", 연봉*0.01))
head(보너스지급내역서)
rm(보너스지급내역서)
head(보너스지급내역서)
write.csv(보너스지급내역서)
#######################################################
보너스지급내역서 <- emp %>% dplyr::filter(연봉 < 3000) %>%
dplyr::arrange(직원아이디) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::mutate(보너스= sprintf("%0.0f 만원", 연봉*0.01))
head(보너스지급내역서)
write.csv(보너스지급내역서)
emp %>% dplyr::filter(연봉 == apply(emp %>% dplyr::select(연봉),2,max)) %>%
dplyr::select(이름)
sprintf("%1.f 냠냠", 101.12)
sprintf("%0.00f 냠냠", 101.12)
sprintf("%-1.f 냠냠", 101.12)
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%.00f 냠냠", 101.12)
sprintf("%.2 냠냠", 101.12)
sprintf("%.1 냠냠", 101.12)
sprintf("%1.0f", pi)
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%05.1f", pi)
sprintf("%+f", pi)
sprintf("% f", pi)
sprintf("%-10f", pi) # left justified
sprintf("%5.1f", pi)
sprintf("%20.1f", pi)
sprintf("s아 놀자", "혜민")
sprintf("%s %d", "test", 1:3)
sprintf("%s아 놀자", "혜민")
sprintf("%s아 놀자", c("혜민","민선","예리")
sprintf("%s아 놀자", c("혜민","민선","예리"))
sprintf("%s아 놀자", c("혜민","민선","예리"))
sprintf("%s %d", "문제", 1:3)
names(emp)
names(emp);names(dep)
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
dplyr::arrange(desc(연봉))
emp$이
#######################################################
## 문제 17. 연봉이 10000이 넘는 직원의 부서명, 이름,
## 연봉을 출력하시오.
#######################################################
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
dplyr::arrange(desc(연봉))
emp$이름
#######################################################
## 문제 17. 연봉이 10000이 넘는 직원의 부서명, 이름,
## 연봉을 출력하시오.
#######################################################
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
dplyr::arrange(desc(연봉))
emp$부서아이
#######################################################
## 문제 17. 연봉이 10000이 넘는 직원의 부서명, 이름,
## 연봉을 출력하시오.
#######################################################
emp %>%
dplyr::left_join(dep, by='부서아이디') %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
dplyr::arrange(desc(연봉))
names(emp);
names(dep)
emp %>% dplyr::left_join(dep,by='부서아이디') %>%
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
job %>% dplyr::left_join(dep,by='부서아이디') %>%
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
names(job)
names(dep)
names(emp);
job %>% dplyr::left_join(emp,by='업무아이디') %>%
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
names(jobh)
names(emp);
names(dep)
names(job)
names(jobh)
job %>% dplyr::left_join(emp,by='업무아이디') %>%
dplyr::left_join(jobh,by='업무아이디')
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
emp %>% dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(job,by='업무아이디')
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
head(emp)
names(emp);
names(dep)
names(job)
emp %>%
dplyr::left_join(dep,by='부서아이디') %>%
dplyr::left_join(job,by='업무아이디') %>%
dplyr::filter(연봉 >= 12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
